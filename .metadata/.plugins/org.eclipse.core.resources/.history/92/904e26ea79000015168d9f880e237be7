package com.aligumusoglu.javawork.bean;

import java.util.ArrayList;
import java.util.List;

/**
 * @author Ali
 */

import javax.annotation.PostConstruct;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;

import com.aligumusoglu.javawork.enums.AppLogType;
import com.aligumusoglu.javawork.enums.PublicResult;
import com.aligumusoglu.javawork.model.User;
import com.aligumusoglu.javawork.dao.AppLogDao;
import com.aligumusoglu.javawork.dao.UserDao;

@ManagedBean
@ViewScoped
public class MainPageBean extends BaseBean {

	private List<User> userList = new ArrayList<User>();
	private List<User> filteredUserList = new ArrayList<User>();
	private User selectedUser;

	@PostConstruct
	public void initBean() {
		fetchUserList();
	}

	private void fetchUserList() {
		filteredUserList = null;
		userList = new UserDao().fetchUserList();
		filteredUserList = userList;
	}

	public void newUser() {
		selectedUser = new User();
	}

	public void save() {

		if (selectedUser.get_id() == null) {
			PublicResult result = new UserDao().save(selectedUser);
			if (result == PublicResult.SUCCESS) {
				addSavedMessage();
				fetchUserList();
				update("frm:userList", "userList", "frm");
				new AppLogDao().saveAppLog(AppLogType.SAVE, selectedUser);
			} else if (result == PublicResult.DUMPLICATE) {
				addWarningMessage("Kayıt mevcut!");
			} else {
				addNotDeletedMessage();
			}
			updateGrowl();
		}

		else

		{

			PublicResult result = new UserDao().updateUser(
					selectedUser.get_id(), selectedUser);
			if (result == PublicResult.SUCCESS) {
				addInfoMessage("Güncelleme Başarılı!");
				new AppLogDao().saveAppLog(AppLogType.UPDATE, selectedUser);
			} else if (result == PublicResult.DUMPLICATE) {
				addWarningMessage("Kayıt mevcut!");
			} else {
				addErrorMessage("Güncelleme İşlemi Başarısız!");
			}
			updateGrowl();

		}

	}

	public void updateUser() {
		PublicResult result = new UserDao().updateUser(selectedUser.get_id(),
				selectedUser);
		if (result == PublicResult.SUCCESS) {
			addInfoMessage("Güncelleme Başarılı");
			new AppLogDao().saveAppLog(AppLogType.UPDATE, selectedUser);
		} else if (result == PublicResult.DUMPLICATE) {
			addWarningMessage("Kayıt mevcut!");
		} else {
			addErrorMessage("Güncelleme İşlemi Başarısız!");
		}
		updateGrowl();
	}

	public void delete() {
		if (selectedUser != null) {
			PublicResult result = new UserDao().deleteUser(selectedUser
					.get_id());
			if (result == PublicResult.SUCCESS) {
				addDeletedMessage();
				fetchUserList();
				update(":frm:userList", "userList", ":frm");
				new AppLogDao().saveAppLog(AppLogType.DELETE, selectedUser);
			}

			else if (result == PublicResult.DUMPLICATE) {
				addWarningMessage("Kayıt mevcut!");
			} else {
				addNotDeletedMessage();
			}
			updateGrowl();
		}

		else{
			addErrorMessage("Kişi Seçilmedi!");
			
		}
			

	}

	public List<User> getUserList() {
		return userList;
	}

	public void setUserList(List<User> userList) {
		this.userList = userList;
	}

	public List<User> getFilteredUserList() {
		return filteredUserList;
	}

	public void setFilteredUserList(List<User> filteredUserList) {
		this.filteredUserList = filteredUserList;
	}

	public User getSelectedUser() {
		return selectedUser;
	}

	public void setSelectedUser(User selectedUser) {
		this.selectedUser = selectedUser;
	}

}
