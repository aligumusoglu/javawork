package com.hasanunlukilinc.sms.beans;

import java.util.List;

import javax.annotation.PostConstruct;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;

import org.hibernate.exception.ConstraintViolationException;

import com.hasanunlukilinc.sms.application.PublicResult;
import com.hasanunlukilinc.sms.entities.ServiceType;

/**
 * 
 * @author hasan
 *
 */

@ManagedBean
@ViewScoped
public class ServiceTypeBean extends BaseBean
{
	private List<ServiceType>	serviceTypeList;
	private List<ServiceType>	filterServiceTypeList;
	private ServiceType			selectedServiceType;

	public ServiceTypeBean()
	{

	}

	@PostConstruct
	private void initBean()
	{
		fetchServiceTypeList();
	}

	private void fetchServiceTypeList()
	{
		filterServiceTypeList = null;
		serviceTypeList = getServiceFactory().getServiceTypeService().getServiceTypeList();
	}

	public void newServiceType()
	{
		selectedServiceType = new ServiceType();
	}

	public void save()
	{
		if (selectedServiceType == null)
			return;

		try
		{
			selectedServiceType.setServiceName(toUpperCase(selectedServiceType.getServiceName()));
			getServiceFactory().getServiceTypeService().saveServiceType(getUserId(), getIp(), selectedServiceType);
			fetchServiceTypeList();
			resetDatatableFilter(String.valueOf(selectedServiceType.getId()));
			selectedServiceType = new ServiceType();
			hideDialog("editDlg");
			update(":editFrm:serviceTypedt", "serviceTypeList");
			addSavedMessage();

		}
		catch (ConstraintViolationException e)
		{

			if (e.getConstraintName().equals("unique_servicetypes_servicename"))
			{
				addErrorMessage("Hizmet Türü : " + selectedServiceType.getServiceName() + " daha önce eklenmiş!");
			}
			else
			{
				addNotSaveMessage();
				addErrorMessage(e.getConstraintName() + " ");
			}
		}

		catch (Exception e)
		{
			addNotSaveMessage();
			addErrorMessage(e.getMessage());
			e.printStackTrace();
		}
		finally
		{
			updateGrowl();
		}

	}

	public void delete()
	{
		if (selectedServiceType == null)
			return;

		PublicResult result = getServiceFactory().getServiceTypeService().deleteServiceType(getUserId(), getIp(),
				selectedServiceType.getId());
		if (result == PublicResult.SUCCESS)
		{
			fetchServiceTypeList();
			selectedServiceType = new ServiceType();
			update("serviceTypeList", "growl");
			addDeletedMessage();
		}
		else
			addNotDeletedMessage();
	}

	public List<ServiceType> getServiceTypeList()
	{
		return serviceTypeList;
	}

	public void setServiceTypeList(List<ServiceType> serviceTypeList)
	{
		this.serviceTypeList = serviceTypeList;
	}

	public ServiceType getSelectedServiceType()
	{
		return selectedServiceType;
	}

	public void setSelectedServiceType(ServiceType selectedServiceType)
	{
		this.selectedServiceType = selectedServiceType;
	}

	public List<ServiceType> getFilterServiceTypeList()
	{
		return filterServiceTypeList;
	}

	public void setFilterServiceTypeList(List<ServiceType> filterServiceTypeList)
	{
		this.filterServiceTypeList = filterServiceTypeList;
	}

}
